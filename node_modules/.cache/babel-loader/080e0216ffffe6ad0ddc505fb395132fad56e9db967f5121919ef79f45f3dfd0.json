{"ast":null,"code":"import*as Yup from\"yup\";var nameSchema=Yup.string().matches(/^[a-z A-Z]+$/,'Name should contain only alphabets');var emailSchema=Yup.string().email('Invalid email address');var mobileSchema=Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/,'Invalid mobile number');var passwordSchema=Yup.string().min(8,'Password should be at least 8 characters long');export function validateField(value,schema){try{schema.validateSync(value);}catch(error){return error.message;}}export var validationSchema=Yup.object({name:nameSchema.required('Name is required'),email:emailSchema.required('Email is required'),phoneNumber:mobileSchema.required('Mobile number is required'),password:passwordSchema.required('Password is required'),companyName:Yup.string().required(\"company name is required\")});","map":{"version":3,"names":["Yup","nameSchema","string","matches","emailSchema","email","mobileSchema","passwordSchema","min","validateField","value","schema","validateSync","error","message","validationSchema","object","name","required","phoneNumber","password","companyName"],"sources":["/home/emproto/Desktop/SecpodProject/newsecpod/src/pages/SignUpFormik/SignUpValidationSchema.tsx"],"sourcesContent":["import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\nexport function validateField(value: string, schema: Yup.StringSchema): string | undefined {\n  try {\n    schema.validateSync(value);\n  } catch (error:any) {\n    return error.message;\n  }\n}\nexport   const validationSchema = Yup.object({\n      name: nameSchema.required('Name is required'),\n      email: emailSchema.required('Email is required'),\n      phoneNumber: mobileSchema.required('Mobile number is required'),\n      password: passwordSchema.required('Password is required'),\n      companyName:Yup.string().required(\"company name is required\")\n    });\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,GAAG,KAAM,KAAK,CAC1B,GAAM,CAAAC,UAAU,CAAGD,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,cAAc,CAAE,oCAAoC,CAAC,CAC7F,GAAM,CAAAC,WAAW,CAAGJ,GAAG,CAACE,MAAM,EAAE,CAACG,KAAK,CAAC,uBAAuB,CAAC,CAC/D,GAAM,CAAAC,YAAY,CAAGN,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,6CAA6C,CAAE,uBAAuB,CAAC,CACjH,GAAM,CAAAI,cAAc,CAAGP,GAAG,CAACE,MAAM,EAAE,CAACM,GAAG,CAAC,CAAC,CAAE,+CAA+C,CAAC,CAC3F,MAAO,SAAS,CAAAC,aAAaA,CAACC,KAAa,CAAEC,MAAwB,CAAsB,CACzF,GAAI,CACFA,MAAM,CAACC,YAAY,CAACF,KAAK,CAAC,CAC5B,CAAE,MAAOG,KAAS,CAAE,CAClB,MAAO,CAAAA,KAAK,CAACC,OAAO,CACtB,CACF,CACA,MAAS,IAAM,CAAAC,gBAAgB,CAAGf,GAAG,CAACgB,MAAM,CAAC,CACvCC,IAAI,CAAEhB,UAAU,CAACiB,QAAQ,CAAC,kBAAkB,CAAC,CAC7Cb,KAAK,CAAED,WAAW,CAACc,QAAQ,CAAC,mBAAmB,CAAC,CAChDC,WAAW,CAAEb,YAAY,CAACY,QAAQ,CAAC,2BAA2B,CAAC,CAC/DE,QAAQ,CAAEb,cAAc,CAACW,QAAQ,CAAC,sBAAsB,CAAC,CACzDG,WAAW,CAACrB,GAAG,CAACE,MAAM,EAAE,CAACgB,QAAQ,CAAC,0BAA0B,CAC9D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}