{"ast":null,"code":"import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\nexport const validateField = (fieldName, validator) => {\n  return value => {\n    try {\n      validator.validateSync(value);\n      return undefined;\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        return err.message;\n      } else {\n        console.error(err);\n        return \"An unknown error occurred while validating this field.\";\n      }\n    }\n  };\n};\nexport const validationSchema = Yup.object({\n  name: nameSchema.required('Name is required'),\n  email: emailSchema.required('Email is required'),\n  phoneNumber: mobileSchema.required('Mobile number is required'),\n  password: passwordSchema.required('Password is required'),\n  companyName: Yup.string().required(\"company name is required\")\n});","map":{"version":3,"names":["Yup","nameSchema","string","matches","emailSchema","email","mobileSchema","passwordSchema","min","validateField","fieldName","validator","value","validateSync","undefined","err","ValidationError","message","console","error","validationSchema","object","name","required","phoneNumber","password","companyName"],"sources":["/home/emproto/Desktop/SecpodProject/newsecpod/src/pages/SignUpFormik/SignUpValidationSchema.tsx"],"sourcesContent":["import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\n\n\nexport const validateField = (fieldName: string, validator: Yup.StringSchema) => {\n  return (value: string) => {\n    try {\n      validator.validateSync(value);\n      return undefined;\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        return err.message;\n      } else {\n        console.error(err);\n        return \"An unknown error occurred while validating this field.\";\n      }\n    }\n  };\n};\nexport   const validationSchema = Yup.object({\n      name: nameSchema.required('Name is required'),\n      email: emailSchema.required('Email is required'),\n      phoneNumber: mobileSchema.required('Mobile number is required'),\n      password: passwordSchema.required('Password is required'),\n      companyName:Yup.string().required(\"company name is required\")\n    });\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,MAAMC,UAAU,GAAGD,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,cAAc,EAAE,oCAAoC,CAAC;AAC7F,MAAMC,WAAW,GAAGJ,GAAG,CAACE,MAAM,EAAE,CAACG,KAAK,CAAC,uBAAuB,CAAC;AAC/D,MAAMC,YAAY,GAAGN,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,6CAA6C,EAAE,uBAAuB,CAAC;AACjH,MAAMI,cAAc,GAAGP,GAAG,CAACE,MAAM,EAAE,CAACM,GAAG,CAAC,CAAC,EAAE,+CAA+C,CAAC;AAG3F,OAAO,MAAMC,aAAa,GAAGA,CAACC,SAAiB,EAAEC,SAA2B,KAAK;EAC/E,OAAQC,KAAa,IAAK;IACxB,IAAI;MACFD,SAAS,CAACE,YAAY,CAACD,KAAK,CAAC;MAC7B,OAAOE,SAAS;IAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,IAAIA,GAAG,YAAYf,GAAG,CAACgB,eAAe,EAAE;QACtC,OAAOD,GAAG,CAACE,OAAO;MACpB,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAACJ,GAAG,CAAC;QAClB,OAAO,wDAAwD;MACjE;IACF;EACF,CAAC;AACH,CAAC;AACD,OAAS,MAAMK,gBAAgB,GAAGpB,GAAG,CAACqB,MAAM,CAAC;EACvCC,IAAI,EAAErB,UAAU,CAACsB,QAAQ,CAAC,kBAAkB,CAAC;EAC7ClB,KAAK,EAAED,WAAW,CAACmB,QAAQ,CAAC,mBAAmB,CAAC;EAChDC,WAAW,EAAElB,YAAY,CAACiB,QAAQ,CAAC,2BAA2B,CAAC;EAC/DE,QAAQ,EAAElB,cAAc,CAACgB,QAAQ,CAAC,sBAAsB,CAAC;EACzDG,WAAW,EAAC1B,GAAG,CAACE,MAAM,EAAE,CAACqB,QAAQ,CAAC,0BAA0B;AAC9D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}