{"ast":null,"code":"import*as Yup from\"yup\";var nameSchema=Yup.string().matches(/^[a-z A-Z]+$/,\"Name should contain only alphabets\");var emailSchema=Yup.string().matches(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\"Invalid email address\");var mobileSchema=Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/,\"Invalid mobile number\");var passwordSchema=Yup.string().min(8,\"Password should be at least 8 characters long\");export function validateField(value,schema){try{schema.validateSync(value);}catch(error){return error.message;}}export var validationSchema=Yup.object({name:nameSchema.required(\"Name is required\"),email:emailSchema.required(\"Email is required\"),phoneNumber:mobileSchema.required(\"Mobile number is required\"),password:passwordSchema.required(\"Password is required\"),companyName:Yup.string().required(\"company name is required\")});","map":{"version":3,"names":["Yup","nameSchema","string","matches","emailSchema","mobileSchema","passwordSchema","min","validateField","value","schema","validateSync","error","message","validationSchema","object","name","required","email","phoneNumber","password","companyName"],"sources":["/home/emproto/Desktop/SecpodProject/newsecpod/src/pages/SignUpFormik/SignUpValidationSchema.tsx"],"sourcesContent":["import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(\n\t/^[a-z A-Z]+$/,\n\t\"Name should contain only alphabets\"\n);\nconst emailSchema = Yup.string().matches(\n\t/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n\t\"Invalid email address\"\n);\nconst mobileSchema = Yup.string().matches(\n\t/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/,\n\t\"Invalid mobile number\"\n);\nconst passwordSchema = Yup.string().min(\n\t8,\n\t\"Password should be at least 8 characters long\"\n);\nexport function validateField(\n\tvalue: string,\n\tschema: Yup.StringSchema\n): string | undefined {\n\ttry {\n\t\tschema.validateSync(value);\n\t} catch (error: any) {\n\t\treturn error.message;\n\t}\n}\nexport const validationSchema = Yup.object({\n\tname: nameSchema.required(\"Name is required\"),\n\temail: emailSchema.required(\"Email is required\"),\n\tphoneNumber: mobileSchema.required(\"Mobile number is required\"),\n\tpassword: passwordSchema.required(\"Password is required\"),\n\tcompanyName: Yup.string().required(\"company name is required\"),\n});\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,GAAG,KAAM,KAAK,CAC1B,GAAM,CAAAC,UAAU,CAAGD,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CACtC,cAAc,CACd,oCAAoC,CACpC,CACD,GAAM,CAAAC,WAAW,CAAGJ,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CACvC,kCAAkC,CAClC,uBAAuB,CACvB,CACD,GAAM,CAAAE,YAAY,CAAGL,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CACxC,6CAA6C,CAC7C,uBAAuB,CACvB,CACD,GAAM,CAAAG,cAAc,CAAGN,GAAG,CAACE,MAAM,EAAE,CAACK,GAAG,CACtC,CAAC,CACD,+CAA+C,CAC/C,CACD,MAAO,SAAS,CAAAC,aAAaA,CAC5BC,KAAa,CACbC,MAAwB,CACH,CACrB,GAAI,CACHA,MAAM,CAACC,YAAY,CAACF,KAAK,CAAC,CAC3B,CAAE,MAAOG,KAAU,CAAE,CACpB,MAAO,CAAAA,KAAK,CAACC,OAAO,CACrB,CACD,CACA,MAAO,IAAM,CAAAC,gBAAgB,CAAGd,GAAG,CAACe,MAAM,CAAC,CAC1CC,IAAI,CAAEf,UAAU,CAACgB,QAAQ,CAAC,kBAAkB,CAAC,CAC7CC,KAAK,CAAEd,WAAW,CAACa,QAAQ,CAAC,mBAAmB,CAAC,CAChDE,WAAW,CAAEd,YAAY,CAACY,QAAQ,CAAC,2BAA2B,CAAC,CAC/DG,QAAQ,CAAEd,cAAc,CAACW,QAAQ,CAAC,sBAAsB,CAAC,CACzDI,WAAW,CAAErB,GAAG,CAACE,MAAM,EAAE,CAACe,QAAQ,CAAC,0BAA0B,CAC9D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}