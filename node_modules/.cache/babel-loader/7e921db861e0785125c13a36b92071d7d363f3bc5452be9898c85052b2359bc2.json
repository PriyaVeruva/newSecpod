{"ast":null,"code":"import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().matches('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\nexport function validateField(value, schema) {\n  try {\n    schema.validateSync(value);\n  } catch (error) {\n    return error.message;\n  }\n}\nexport const validationSchema = Yup.object({\n  name: nameSchema.required('Name is required'),\n  email: emailSchema.required('Email is required'),\n  phoneNumber: mobileSchema.required('Mobile number is required'),\n  password: passwordSchema.required('Password is required'),\n  companyName: Yup.string().required(\"company name is required\")\n});","map":{"version":3,"names":["Yup","nameSchema","string","matches","emailSchema","mobileSchema","passwordSchema","min","validateField","value","schema","validateSync","error","message","validationSchema","object","name","required","email","phoneNumber","password","companyName"],"sources":["/home/emproto/Desktop/SecpodProject/newsecpod/src/pages/SignUpFormik/SignUpValidationSchema.tsx"],"sourcesContent":["import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().matches('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\nexport function validateField(value: string, schema: Yup.StringSchema): string | undefined {\n  try {\n    schema.validateSync(value);\n  } catch (error:any) {\n    return error.message;\n  }\n}\nexport   const validationSchema = Yup.object({\n      name: nameSchema.required('Name is required'),\n      email: emailSchema.required('Email is required'),\n      phoneNumber: mobileSchema.required('Mobile number is required'),\n      password: passwordSchema.required('Password is required'),\n      companyName:Yup.string().required(\"company name is required\")\n    });\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,MAAMC,UAAU,GAAGD,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,cAAc,EAAE,oCAAoC,CAAC;AAC7F,MAAMC,WAAW,GAAGJ,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,uBAAuB,CAAC;AACjE,MAAME,YAAY,GAAGL,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,6CAA6C,EAAE,uBAAuB,CAAC;AACjH,MAAMG,cAAc,GAAGN,GAAG,CAACE,MAAM,EAAE,CAACK,GAAG,CAAC,CAAC,EAAE,+CAA+C,CAAC;AAC3F,OAAO,SAASC,aAAaA,CAACC,KAAa,EAAEC,MAAwB,EAAsB;EACzF,IAAI;IACFA,MAAM,CAACC,YAAY,CAACF,KAAK,CAAC;EAC5B,CAAC,CAAC,OAAOG,KAAS,EAAE;IAClB,OAAOA,KAAK,CAACC,OAAO;EACtB;AACF;AACA,OAAS,MAAMC,gBAAgB,GAAGd,GAAG,CAACe,MAAM,CAAC;EACvCC,IAAI,EAAEf,UAAU,CAACgB,QAAQ,CAAC,kBAAkB,CAAC;EAC7CC,KAAK,EAAEd,WAAW,CAACa,QAAQ,CAAC,mBAAmB,CAAC;EAChDE,WAAW,EAAEd,YAAY,CAACY,QAAQ,CAAC,2BAA2B,CAAC;EAC/DG,QAAQ,EAAEd,cAAc,CAACW,QAAQ,CAAC,sBAAsB,CAAC;EACzDI,WAAW,EAACrB,GAAG,CAACE,MAAM,EAAE,CAACe,QAAQ,CAAC,0BAA0B;AAC9D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}