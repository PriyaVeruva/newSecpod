{"ast":null,"code":"import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-zA-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(6, 'Password should be at least 6 characters long');\nexport function validateField(value) {\n  try {\n    validateSync(value);\n  } catch (error) {\n    return error.message;\n  }\n}\nexport const validationSchema = Yup.object({\n  name: nameSchema.required('Name is required'),\n  email: emailSchema.required('Email is required'),\n  mobile: mobileSchema.required('Mobile number is required'),\n  password: passwordSchema.required('Password is required')\n});","map":{"version":3,"names":["Yup","nameSchema","string","matches","emailSchema","email","mobileSchema","passwordSchema","min","validateField","value","validateSync","error","message","validationSchema","object","name","required","mobile","password"],"sources":["/home/emproto/Desktop/SecpodProject/newsecpod/src/pages/SignUpFormik/SignUpValidationSchema.tsx"],"sourcesContent":["import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-zA-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(6, 'Password should be at least 6 characters long');\n\nexport function validateField(value: string): string | undefined {\n  try {\n    validateSync(value);\n  } catch (error:any) {\n    return error.message;\n  }\n}\n\n\n  export   const validationSchema = Yup.object({\n      name: nameSchema.required('Name is required'),\n      email: emailSchema.required('Email is required'),\n      mobile: mobileSchema.required('Mobile number is required'),\n      password: passwordSchema.required('Password is required'),\n    });\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,MAAMC,UAAU,GAAGD,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,aAAa,EAAE,oCAAoC,CAAC;AAC5F,MAAMC,WAAW,GAAGJ,GAAG,CAACE,MAAM,EAAE,CAACG,KAAK,CAAC,uBAAuB,CAAC;AAC/D,MAAMC,YAAY,GAAGN,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,6CAA6C,EAAE,uBAAuB,CAAC;AACjH,MAAMI,cAAc,GAAGP,GAAG,CAACE,MAAM,EAAE,CAACM,GAAG,CAAC,CAAC,EAAE,+CAA+C,CAAC;AAE3F,OAAO,SAASC,aAAaA,CAACC,KAAa,EAAsB;EAC/D,IAAI;IACFC,YAAY,CAACD,KAAK,CAAC;EACrB,CAAC,CAAC,OAAOE,KAAS,EAAE;IAClB,OAAOA,KAAK,CAACC,OAAO;EACtB;AACF;AAGE,OAAS,MAAMC,gBAAgB,GAAGd,GAAG,CAACe,MAAM,CAAC;EACzCC,IAAI,EAAEf,UAAU,CAACgB,QAAQ,CAAC,kBAAkB,CAAC;EAC7CZ,KAAK,EAAED,WAAW,CAACa,QAAQ,CAAC,mBAAmB,CAAC;EAChDC,MAAM,EAAEZ,YAAY,CAACW,QAAQ,CAAC,2BAA2B,CAAC;EAC1DE,QAAQ,EAAEZ,cAAc,CAACU,QAAQ,CAAC,sBAAsB;AAC1D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}