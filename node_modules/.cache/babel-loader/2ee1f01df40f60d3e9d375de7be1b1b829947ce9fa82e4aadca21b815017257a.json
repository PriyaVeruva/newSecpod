{"ast":null,"code":"import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^\\d{10}$/, 'Mobile number should contain exactly 10 digits').transform((value, originalValue) => {\n  // If the user is typing, remove all non-numeric characters and limit to 10 digits\n  if (/^\\d*$/.test(originalValue)) {\n    return originalValue.slice(0, 10);\n  }\n  return value;\n});\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\nexport function validateField(value, schema) {\n  try {\n    schema.validateSync(value);\n  } catch (error) {\n    return error.message;\n  }\n}\nexport const validationSchema = Yup.object({\n  name: nameSchema.required('Name is required'),\n  email: emailSchema.required('Email is required'),\n  phoneNumber: mobileSchema.required('Mobile number is required'),\n  password: passwordSchema.required('Password is required'),\n  companyName: Yup.string().required(\"company name is required\")\n});","map":{"version":3,"names":["Yup","nameSchema","string","matches","emailSchema","email","mobileSchema","transform","value","originalValue","test","slice","passwordSchema","min","validateField","schema","validateSync","error","message","validationSchema","object","name","required","phoneNumber","password","companyName"],"sources":["/home/emproto/Desktop/SecpodProject/newsecpod/src/pages/SignUpFormik/SignUpValidationSchema.tsx"],"sourcesContent":["import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string()\n  .matches(/^\\d{10}$/, 'Mobile number should contain exactly 10 digits')\n  .transform((value, originalValue) => {\n    // If the user is typing, remove all non-numeric characters and limit to 10 digits\n    if (/^\\d*$/.test(originalValue)) {\n      return originalValue.slice(0, 10);\n    }\n    return value;\n  });\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\nexport function validateField(value: string, schema: Yup.StringSchema): string | undefined {\n  try {\n    schema.validateSync(value);\n  } catch (error:any) {\n    return error.message;\n  }\n}\nexport   const validationSchema = Yup.object({\n      name: nameSchema.required('Name is required'),\n      email: emailSchema.required('Email is required'),\n      phoneNumber: mobileSchema.required('Mobile number is required'),\n      password: passwordSchema.required('Password is required'),\n      companyName:Yup.string().required(\"company name is required\")\n    });\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,MAAMC,UAAU,GAAGD,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,cAAc,EAAE,oCAAoC,CAAC;AAC7F,MAAMC,WAAW,GAAGJ,GAAG,CAACE,MAAM,EAAE,CAACG,KAAK,CAAC,uBAAuB,CAAC;AAC/D,MAAMC,YAAY,GAAGN,GAAG,CAACE,MAAM,EAAE,CAC9BC,OAAO,CAAC,UAAU,EAAE,gDAAgD,CAAC,CACrEI,SAAS,CAAC,CAACC,KAAK,EAAEC,aAAa,KAAK;EACnC;EACA,IAAI,OAAO,CAACC,IAAI,CAACD,aAAa,CAAC,EAAE;IAC/B,OAAOA,aAAa,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACnC;EACA,OAAOH,KAAK;AACd,CAAC,CAAC;AACJ,MAAMI,cAAc,GAAGZ,GAAG,CAACE,MAAM,EAAE,CAACW,GAAG,CAAC,CAAC,EAAE,+CAA+C,CAAC;AAC3F,OAAO,SAASC,aAAaA,CAACN,KAAa,EAAEO,MAAwB,EAAsB;EACzF,IAAI;IACFA,MAAM,CAACC,YAAY,CAACR,KAAK,CAAC;EAC5B,CAAC,CAAC,OAAOS,KAAS,EAAE;IAClB,OAAOA,KAAK,CAACC,OAAO;EACtB;AACF;AACA,OAAS,MAAMC,gBAAgB,GAAGnB,GAAG,CAACoB,MAAM,CAAC;EACvCC,IAAI,EAAEpB,UAAU,CAACqB,QAAQ,CAAC,kBAAkB,CAAC;EAC7CjB,KAAK,EAAED,WAAW,CAACkB,QAAQ,CAAC,mBAAmB,CAAC;EAChDC,WAAW,EAAEjB,YAAY,CAACgB,QAAQ,CAAC,2BAA2B,CAAC;EAC/DE,QAAQ,EAAEZ,cAAc,CAACU,QAAQ,CAAC,sBAAsB,CAAC;EACzDG,WAAW,EAACzB,GAAG,CAACE,MAAM,EAAE,CAACoB,QAAQ,CAAC,0BAA0B;AAC9D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}