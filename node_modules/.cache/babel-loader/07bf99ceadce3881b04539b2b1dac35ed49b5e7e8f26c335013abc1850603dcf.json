{"ast":null,"code":"import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\nexport const validateField = (fieldName, validator) => {\n  return value => {\n    try {\n      validator.validateSync(value);\n      return undefined;\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        return err.message;\n      } else {\n        console.error(err);\n        return \"An unknown error occurred while validating this field.\";\n      }\n    }\n  };\n};\nexport const validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Name is required.\"),\n  email: Yup.string().email(\"Invalid email address.\").required(\"Email is required.\"),\n  phoneNumber: Yup.string().required(\"Phone number is required.\").max(10, \"Phone number should be 10 digits long.\"),\n  companyName: Yup.string().required(\"Company name is required.\"),\n  password: Yup.string().required(\"Password is required.\").min(8, \"Password must be at least 8 characters long.\")\n});","map":{"version":3,"names":["Yup","nameSchema","string","matches","emailSchema","email","mobileSchema","passwordSchema","min","validateField","fieldName","validator","value","validateSync","undefined","err","ValidationError","message","console","error","validationSchema","object","shape","name","required","phoneNumber","max","companyName","password"],"sources":["/home/emproto/Desktop/SecpodProject/newsecpod/src/pages/SignUpFormik/SignUpValidationSchema.tsx"],"sourcesContent":["import * as Yup from \"yup\";\nconst nameSchema = Yup.string().matches(/^[a-z A-Z]+$/, 'Name should contain only alphabets');\nconst emailSchema = Yup.string().email('Invalid email address');\nconst mobileSchema = Yup.string().matches(/^(\\+?\\d{1,4}[\\s-])?(?!0+\\s+,?$)\\d{10}\\s*,?$/, 'Invalid mobile number');\nconst passwordSchema = Yup.string().min(8, 'Password should be at least 8 characters long');\n\n\nexport const validateField = (fieldName: string, validator: Yup.StringSchema) => {\n  return (value: string) => {\n    try {\n      validator.validateSync(value);\n      return undefined;\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        return err.message;\n      } else {\n        console.error(err);\n        return \"An unknown error occurred while validating this field.\";\n      }\n    }\n  };\n};\nexport const validationSchema = Yup.object().shape({\n  name: Yup.string().required(\"Name is required.\"),\n  email: Yup.string().email(\"Invalid email address.\").required(\"Email is required.\"),\n  phoneNumber: Yup.string().required(\"Phone number is required.\").max(10, \"Phone number should be 10 digits long.\"),\n  companyName: Yup.string().required(\"Company name is required.\"),\n  password: Yup.string().required(\"Password is required.\").min(8, \"Password must be at least 8 characters long.\"),\n});\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,MAAMC,UAAU,GAAGD,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,cAAc,EAAE,oCAAoC,CAAC;AAC7F,MAAMC,WAAW,GAAGJ,GAAG,CAACE,MAAM,EAAE,CAACG,KAAK,CAAC,uBAAuB,CAAC;AAC/D,MAAMC,YAAY,GAAGN,GAAG,CAACE,MAAM,EAAE,CAACC,OAAO,CAAC,6CAA6C,EAAE,uBAAuB,CAAC;AACjH,MAAMI,cAAc,GAAGP,GAAG,CAACE,MAAM,EAAE,CAACM,GAAG,CAAC,CAAC,EAAE,+CAA+C,CAAC;AAG3F,OAAO,MAAMC,aAAa,GAAGA,CAACC,SAAiB,EAAEC,SAA2B,KAAK;EAC/E,OAAQC,KAAa,IAAK;IACxB,IAAI;MACFD,SAAS,CAACE,YAAY,CAACD,KAAK,CAAC;MAC7B,OAAOE,SAAS;IAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,IAAIA,GAAG,YAAYf,GAAG,CAACgB,eAAe,EAAE;QACtC,OAAOD,GAAG,CAACE,OAAO;MACpB,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAACJ,GAAG,CAAC;QAClB,OAAO,wDAAwD;MACjE;IACF;EACF,CAAC;AACH,CAAC;AACD,OAAO,MAAMK,gBAAgB,GAAGpB,GAAG,CAACqB,MAAM,EAAE,CAACC,KAAK,CAAC;EACjDC,IAAI,EAAEvB,GAAG,CAACE,MAAM,EAAE,CAACsB,QAAQ,CAAC,mBAAmB,CAAC;EAChDnB,KAAK,EAAEL,GAAG,CAACE,MAAM,EAAE,CAACG,KAAK,CAAC,wBAAwB,CAAC,CAACmB,QAAQ,CAAC,oBAAoB,CAAC;EAClFC,WAAW,EAAEzB,GAAG,CAACE,MAAM,EAAE,CAACsB,QAAQ,CAAC,2BAA2B,CAAC,CAACE,GAAG,CAAC,EAAE,EAAE,wCAAwC,CAAC;EACjHC,WAAW,EAAE3B,GAAG,CAACE,MAAM,EAAE,CAACsB,QAAQ,CAAC,2BAA2B,CAAC;EAC/DI,QAAQ,EAAE5B,GAAG,CAACE,MAAM,EAAE,CAACsB,QAAQ,CAAC,uBAAuB,CAAC,CAAChB,GAAG,CAAC,CAAC,EAAE,8CAA8C;AAChH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}